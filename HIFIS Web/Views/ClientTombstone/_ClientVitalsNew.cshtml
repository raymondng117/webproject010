@model ClientVitalsViewModel
@{
    var appSettings = (HIFIS.CONTRACTS.WCFContracts.DataContracts.ApplicationSettings)ViewBag.AppSettings;
    // string lang = ViewBag.CurrentCulture == Constants.Eng ? "en" : "fr";
}

<div id="_ClientVitalsNew_FormSection" class="mrgn-tp-md">

    @Html.AntiForgeryToken()

    <div class="row hiddenInputSection">
        @Html.HiddenFor(model => model.ClientID, Model.ClientID)
        @Html.HiddenFor(model => model.PersonID)
        @Html.HiddenFor(model => model.IsCreatingFamilyMember)
        @Html.HiddenFor(model => model.EnforceConsent)
    </div>

    @if (Model.IsCreatingFamilyMember)
    {
        <div class="row">
            @Html.HifisLabelFor(model => model.GroupRoleTypeID, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(model => model.GroupRoleTypeID, CachedTableTypes.HIFIS_GroupRoleTypes, null, true, null)
            </div>
        </div>

        <div class="row">
            @Html.HifisLabelFor(model => model.ClientRelationshipTypeID, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(model => model.ClientRelationshipTypeID, CachedTableTypes.HIFIS_PeopleRelationshipTypes, null, true, null)
            </div>
        </div>
    }
    @if (Model.EnforceConsent)
    {

        <div class="consent-fields mrgn-bttm-sm">

            <div class="row">
                @Html.HifisLabelFor(model => model.ConsentTypeID, new { @class = "col-xs-4 control-label" })
                <div class="col-xs-8">
                    @Html.HifisEditorFor(model => model.ConsentTypeID, ViewBag.TypeList as SelectList, null, null, true, null)
                </div>
            </div>

            <div class="row">
                @Html.HifisLabelFor(model => model.ConsentStartDate, new { @class = "col-xs-4 control-label" })
                <div class="col-xs-8">
                    @Html.HifisEditorFor(model => model.ConsentStartDate, null, new { disabled = "disabled" }, true, null)
                </div>
            </div>

            <div id="explicitConsentFields">

                <div class="row">
                    @Html.HifisLabelFor(model => model.ConsentExpiryDate, new { @class = "col-xs-4 control-label" })
                    <div class="col-xs-8">
                        @Html.HifisEditorFor(model => model.ConsentExpiryDate, null, null, true, null)
                    </div>
                </div>

                <div class="row">
                    @Html.HifisLabelFor(model => model.ConsentUploadedFile, new { @class = "col-xs-4 control-label" })
                    <div class="col-xs-8">
                        @Html.HifisEditorFor(model => model.ConsentUploadedFile, "File", null, true, null)
                    </div>
                </div>

            </div>

            <div id="inheritedConsentFields">
                @if (!Model.IsCreatingFamilyMember)
                {
                    <div id="familyFields">

                        <div class="row">
                            @Html.HifisLabelFor(model => model.FamilyHeadClientName, new { @class = "col-xs-4 control-label" })
                            <div class="col-xs-8">
                                @Html.HifisAutocompleteFor(
                                model => model.FamilyHeadClientID
                                , Url.Content("~/ClientTombstone/AjaxGetFamilyHeadsWithActiveConsentList")
                                , Model.FamilyHeadClientName
                                , new AutocompleteViewModelOptions()
                                {
                                    OnSelect = "",
                                    HiddenValue = true,
                                    ExcludeLabel = true
                                })
                            </div>
                        </div>

                        <div class="row">
                            @Html.HifisLabelFor(model => model.GroupRoleTypeID, new { @class = "col-xs-4 control-label" })
                            <div class="col-xs-8">
                                @Html.HifisEditorFor(model => model.GroupRoleTypeID, CachedTableTypes.HIFIS_GroupRoleTypes, null, true, null)
                            </div>
                        </div>

                        <div class="row">
                            @Html.HifisLabelFor(model => model.ClientRelationshipTypeID, new { @class = "col-xs-4 control-label" })
                            <div class="col-xs-8">
                                @Html.HifisEditorFor(model => model.ClientRelationshipTypeID, CachedTableTypes.HIFIS_PeopleRelationshipTypes, null, true, null)
                            </div>
                        </div>

                    </div>
                }
                else
                {
                    <div class="row hiddenInputSection">
                        @Html.HiddenFor(model => model.FamilyHeadClientID)
                        @Html.HiddenFor(model => model.GroupID)
                        @Html.HiddenFor(model => model.FromClientID)
                    </div>
                }

            </div>
        </div>
    }
    else
    {
        <div class="row hiddenInputSection">
            @Html.HiddenFor(model => model.FamilyHeadClientID)
            @Html.HiddenFor(model => model.GroupID)
            @Html.HiddenFor(model => model.FromClientID)
            @Html.HiddenFor(model => model.ConsentTypeID)
        </div>
    }

    @if (Model.ClientID != null)
    {
        <div class="row">
            <div class="form-group">
                @Html.HifisLabelFor("ConsentTypeID", Labels.ConsentType, new { @class = "col-xs-4 control-label" })
                <div class="col-xs-8">
                    <div class="input-group">
                        @if (Model.ConsentTypeID != null)
                        {
                            <input type="text" class="inputTextOnly" id="ConsentTypeID" name="ConsentTypeID"
                                   value="@WebHelper.GetTextFromCache(CachedTableTypes.HIFIS_ConsentTypes, Culture, Model.ConsentTypeID)" readonly />
                        }
                        else
                        {
                            <input type="text" class="inputTextOnly" id="ConsentTypeID" name="ConsentTypeID"
                                   value="@Labels.NoConsent" readonly />
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        @Html.HifisLabelFor(model => model.LastName, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.LastName, null, new { @class = "attachSearchEvent" }, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.FirstName, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.FirstName, null, new { @class = "attachSearchEvent" }, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.MiddleName, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.MiddleName, null, null, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.Aka1, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.Aka1, null, new { @class = "attachSearchEvent" }, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.Aka2, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.Aka2, null, new { @class = "attachSearchEvent" }, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.DOBDateFirmYNbool, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.DOBDateFirmYNbool, "YesNo", null, true, null)
        </div>
    </div>

    <div id="AgeAndDOBSection">

        <div id="DOBFlag" class="row">
            @Html.HifisLabelFor(model => model.DOB, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(m => m.DOB, null, null, true, null)
            </div>
        </div>

        <div id="AgeFlag" class="row">
            @Html.HifisLabelFor(model => model.AproximativeAge, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(m => m.AproximativeAge, null, null, true, null)
            </div>
        </div>

    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.InfoVerifiedYN, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.InfoVerifiedYN, "YesNo", null, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.GenderID, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.GenderID, CachedTableTypes.HIFIS_GenderTypes, null, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.DisabilityYN, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.DisabilityYN, "YesNo", null, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.MedicAlertYN, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.MedicAlertYN, "YesNo", null, true, null)
        </div>
    </div>

    @if (RightsHelper.HasRight(UserRights.Client_Hide))
    {
        <div class="row">
            @Html.HifisLabelFor(m => m.IsStealth, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                <div class="form-group">
                    @{
                        object first = new { @class = "YesAndNo", data_on_text = Labels.Hidden, data_off_text = Labels.Visible, data_on_color = "danger", data_off_color = "info" };
                    }
                    @Html.CheckBoxFor(m => m.IsStealth, first)
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row hiddenInputSection">
            @Html.HiddenFor(model => model.IsStealth)
        </div>
    }

    <div class="row">
        <div class="form-group">
            <div class="col-xs-4"></div>
            <div id="veteransSite" class="col-xs-8 hide">
                <a href="http://www.veterans.gc.ca" rel="nofollow" target="_blank">www.veterans.gc.ca</a>
            </div>
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor("veteransEdit", Labels.VeteranStatus, new { @class = "col-xs-4 control-label" })
        <div class="col-sm-8">
            @Html.HifisEditorFor(m => m.VeteranStateID, CachedTableTypes.HIFIS_VeteranStatesTypes, new { id = "veteransEdit", @class = "mrgn-lft-sm" }, true, null)
            @Html.HiddenFor(m => m.VeteranStateID, new { id = "veteransEditHidden" })
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.CitizenshipTypeID, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.CitizenshipTypeID, CachedTableTypes.HIFIS_CitizenshipTypes, null, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor(model => model.AboriginalIndicatorID, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.AboriginalIndicatorID, CachedTableTypes.HIFIS_AboriginalIndicatorTypes,  new { @class = "Aboriginal", id = "ddlAboriginalIndicatorID" }, true, null)
        </div>
    </div>
<!--Racial Identity-->
<div class="row" id="divRacialIdentity">   
    @Html.Partial("_RacialIdentity", Model)
</div>
<div class="row">
    @Html.HifisLabelFor(model => model.GeoRegionTypeID, new { @class = "col-xs-4 control-label" })
    <div class="col-xs-8">
        @Html.HifisEditorFor(m => m.GeoRegionTypeID, CachedTableTypes.HIFIS_GeoRegionTypes, null, true, null)
    </div>
</div>

    <div class="row">
        @Html.HifisLabelFor(model => model.FileNumber, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(m => m.FileNumber, null, null, true, null)
        </div>
    </div>

    <div class="row">
        @Html.HifisLabelFor("ddlCountryOfBirth", Labels.CountryOfBirth, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(model => model.CountryOfBirth, CachedTableTypes.HIFIS_CountryTypes, new { @class = "Country", id = "ddlCountryOfBirth" }, true, null)
        </div>
    </div>

    <div id="BirthSelectSection">
        <div id="divClientBirthCanada">
            @Html.Partial("_ClientBirthCanada", Model)
        </div>
        <div id="divClientBirthUnitedStates">
            @Html.Partial("_ClientBirthUnitedStates", Model)
        </div>
        <div id="divClientBirthInternational">
            @Html.Partial("_ClientBirthInternational", Model)
        </div>
    </div>


    @if (Model.ClientID == null)
    {
        <div class="row hiddenInputSection">
            @Html.HiddenFor(m => m.ClientStateTypeID)
        </div>
    }
    else
    {
        <div class="row">
            @Html.HifisLabelFor(model => model.ClientStateTypeID, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(m => m.ClientStateTypeID, ViewBag.TypeList as SelectList, null, new { id = "ddlClientStateType" }, true, null)
            </div>
        </div>
    }

    <div id="Deceased">

        <div class="row">
            @Html.HifisLabelFor(model => model.CauseOfDeathTypeID, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(m => m.CauseOfDeathTypeID, CachedTableTypes.HIFIS_CauseOfDeathTypes, null, true, null)
            </div>
        </div>

        <div class="row">
            @Html.HifisLabelFor(model => model.DODApproxYN, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(m => m.DODApproxYN, "YesNo", null, true, null)
            </div>
        </div>

        <div class="row">
            @Html.HifisLabelFor(model => model.DOD, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(m => m.DOD, "DateOnly", null, true, null)
            </div>
        </div>

    </div>

    <hr>
    @*@if (ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString() == "NewVitals")
        {*@
    <div class="row mrgn-bttm-sm">
        @Html.HifisLabelFor(model => model.InsertHousingHistory, new { @class = "col-xs-4 control-label" })
        <div class="col-xs-8">
            @Html.HifisEditorFor(model => model.InsertHousingHistory, "YesNo", null, true, null)
        </div>
    </div>

    <div id="housingDetails">

        <div class="row">
            @Html.HifisLabelFor(model => model.HouseTypeID, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(model => model.HouseTypeID, CachedTableTypes.HIFIS_HouseTypes, null, true, null)
            </div>
        </div>

        <div class="row">
            @Html.HifisLabelFor(model => model.HousingDateStart, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(model => model.HousingDateStart, null, null, true, null)
            </div>
        </div>

        <div class="row">
            @Html.HifisLabelFor(model => model.HousingDateEnd, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(model => model.HousingDateEnd, null, null, true, null)
            </div>
        </div>

        <div class="row">
            @Html.HifisLabelFor("ddlCountry", Labels.Country, new { @class = "col-xs-4 control-label" })
            <div class="col-xs-8">
                @Html.HifisEditorFor(model => model.HousingCountryID, CachedTableTypes.HIFIS_CountryTypes, new { id = "ddlCountry" }, true, null)
            </div>
        </div>
    </div>
    @*}*@

</div>

<!-- Modals -->
<!-- Age Validation -->
<div id="age-confirm" class="modal mrgn-tp-20">
    <div class="modal-dialog whiteBackground">
        <div class="modal-content">
            <div class="modal-header alert alert-warning">
                <h4 class="modal-title">@Labels.Confirmation</h4>
            </div>
            <div class="modal-body">
                <p></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="cancelButton modalCloseButton no-print" data-dismiss="modal">@Labels.Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Consent Age Validation-->
<div id="consent-confirm" class="modal mrgn-tp-20">
    <div class="modal-dialog whiteBackground">
        <div class="modal-content">
            <div class="modal-header alert alert-warning">
                <h4 class="modal-title">@Labels.Confirmation</h4>
            </div>
            <div class="modal-body">
                <p></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="cancelButton modalCloseButton no-print" data-dismiss="modal">@Labels.Close</button>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginScriptContext())
{
    Html.AddScriptBlock(
    @<script type="text/javascript">


                $(document).ready(function () {

                    $(".Country").change(function () {
                            @Html.Partial("_Ajax", new AjaxViewModel()
                            {
                                Url = "'" + Url.Content("~/ClientTombstone/AjaxGetProvinceList") + "'",
                                Data = "{CountryID: $(this).val()}",
                                OnSuccess = @"var select = document.getElementById('ProvinceOfBirth');
                                                select.options.length = 0; // clear out existing items
                                                for(var i=0; i < data.length; i++) {
                                                    var d = data[i];
                                                    select.options.add(new Option(d.Text, d.Value))
                                                }
                                                $('#ProvinceOfBirth').trigger('change');
                                                "
                            })
                    });
                    $(".Aboriginal").change(function () {

                        var selectedIndigenousOption = $(".Aboriginal").val();

                        if (selectedIndigenousOption ==@((byte)IndianStatusTypes.NonAboriginal)) {

                           /* alert("Option Selected:" + $(".Aboriginal").text())*/
                            
                            $("#ddlRacialIdentityTypeID option[value='@((short)ClientRacialIdentityTypes.IdentifyAsIndigenousOnly)']").prop('disabled', true);
                        }
                        else {

                            $("#ddlRacialIdentityTypeID option[value='@((short)ClientRacialIdentityTypes.IdentifyAsIndigenousOnly)']").prop('disabled', false);
                        }

                       // $('#divRacialIdentity').show();


                    });


                    $('#housingDetails').hide();
                   // $('#divRacialIdentity').hide();

                });

        $('#ddlCountryOfBirth').ready(ShowHideCountryDIV);
        $('#ddlCountryOfBirth').change(ShowHideCountryDIV);

        function ShowHideCountryDIV() {
            var countryID = parseInt($('#ddlCountryOfBirth').val());

            if (countryID == 1) { // Canada
                $('#divClientBirthCanada').show();
                $('#divClientBirthUnitedStates').hide();
                $('#divClientBirthInternational').hide();
            }
            else if (countryID == 2) { // United States
                $('#divClientBirthCanada').hide();
                $('#divClientBirthUnitedStates').show();
                $('#divClientBirthInternational').hide();
            }
            else if (countryID >= 3) { // International
                $('#divClientBirthCanada').hide();
                $('#divClientBirthUnitedStates').hide();
                $('#divClientBirthInternational').show();
            }
            else if (countryID != undefined || countryID != NaN || countryID != '') { // No Selection
                $('#divClientBirthCanada').hide();
                $('#divClientBirthUnitedStates').hide();
                $('#divClientBirthInternational').hide();
            }
            else { // Default
                $('#divClientBirthCanada').hide();
                $('#divClientBirthUnitedStates').hide();
                $('#divClientBirthInternational').hide();
            }
        }

        function FamReq() {
            if($('#IsCreatingFamilyMember').val() == "True"){
                return true;
            }else if($('#ConsentTypeID').val() == "3"){
                return true;
            }else{
                return false;
            }
        }

        function ConReq() {
            if($('#EnforceConsent').val() == "True"){
                return true;
            }else{
                return false;
            }
        }

                    function ConReq2() {
                        if($('#ConsentTypeID').val() == "3"){
                            return true;
                        }else{
                            return false;
                        }
                                    }
                    function RacialId() {
                        if ($('#ClientID').val() != null) {
                            return true;
                        } else {
                            return false;
                        }
                    }

        var veteransEdit = $("#veteransEdit");
        veteransEdit.on("blur", function() {
            var veteransSite = $("#veteransSite");
            if (veteransEdit.val() == 1)
                veteransSite.removeClass("hide");
            else
                veteransSite.addClass("hide");
        });

        function ShowHideDIV() {
            var StateID = parseInt($('#ddlClientStateType').val());
            switch (StateID) {
                case @((byte)ClientStateTypes.Active):
                case @((byte)ClientStateTypes.InActive):
                    $('#Deceased').hide();
                    break;
                case @((byte)ClientStateTypes.Deceased):
                    $('#Deceased').show();
                    break;
                default:
                    $('#Deceased').hide();
            }
        }

        function validateOldAge() {
            var clientAgeValidation = @Constants.ClientAgeValidation;
            if ($('#AproximativeAge').val() >= clientAgeValidation)
            {
                //displayNotification('info', 'Client Age Information', "@Labels.ClientAgeVal1" + " " + $('#DOB').val() + " " + "@Labels.ClientAgeVal2" + " " + $('#AproximativeAge').val() + " " + "@Labels.ClientAgeVal3");
                // show the age validation modal to confirm whether the birthdate is correct
                var AgeValidationMessage = "@Labels.ClientAgeVal1" + " <strong>" + $('#DOB').val() + "</strong> " + "@Labels.ClientAgeVal2" + " <strong>" + $('#AproximativeAge').val() + "</strong> " + "@Labels.ClientAgeVal3" ;
                $(".modal-body").empty();
                $(".modal-body").append("<p>" + AgeValidationMessage + "</p>");
                $("#age-confirm").show();
            }
        }

        function validateConsentAge() {
            if ($('#AproximativeAge').val() != "" && $('#ConsentTypeID').val() != "") {
                var consentAgeValidation = @appSettings.GetMinTriggerConsentAge();
                if ($('#AproximativeAge').val() < consentAgeValidation && ($('#ConsentTypeID').val() == "@((short)ConsentTypes.Explicit)" || $('#ConsentTypeID').val() == "@((short)ConsentTypes.CoordinatedAccessExplicit)")) {
                    // show the consent validation modal to confirm whether the consent type is correct
                    var ConsentValidationMessage = "@Labels.TriggerInheritedAgeError";
                    $(".modal-body").empty();
                    $(".modal-body").append("<p>" + ConsentValidationMessage + "</p>");
                    $("#consent-confirm").show();
                }
                else if ($('#AproximativeAge').val() >= consentAgeValidation && ($('#ConsentTypeID').val() == "@((short)ConsentTypes.Inherited)")) {
                    var ConsentValidationMessage = "@Labels.TriggerConsentAgeError";
                    $(".modal-body").empty();
                    $(".modal-body").append("<p>" + ConsentValidationMessage + "</p>");
                    $("#consent-confirm").show();
                }
            }
        }

        function validateMinVeteranAge() {
            var clientAgeDate = $('#DOB').val()
            mCurrentDate = moment(),
            mClientAgeDate = moment(clientAgeDate);

            if (mClientAgeDate._isAMomentObject && mClientAgeDate._d instanceof Date && !isNaN(mClientAgeDate._d)) {
                var years = mCurrentDate.diff(mClientAgeDate, 'years', true);
                if (years < @Constants.ClientMinimumVeteranAge) {
                    var notVeteran = @((byte)VeteranStatus.NotVeteran);
                    $('#veteransEdit').val(notVeteran).trigger('change').prop('disabled', true);
                    $('#veteransEditHidden').val(notVeteran).trigger('change');
                    displayNotification('info', '', "<p>@Labels.VeteranMinimumAgeInfo @Constants.ClientMinimumVeteranAge @Labels.YearsOther</p>");
                } else {
                    $('#veteransEdit').prop("disabled", false);
                    $('#veteransEdit').change();
                }
            } else {
                $('#veteransEdit').prop("disabled", false);
                $('#veteransEdit').change();
            }
        }

        function setDateFromAge(event) {
            var approxAge = parseInt(event.target.value);
            if (!isNaN(approxAge)) 
            {
                var currentYear = new Date().getFullYear();
                var date = new Date();
                date.setMonth(0);
                date.setDate(1);
                date.setFullYear((currentYear - approxAge));

                $('#DOB').val(date.toISOString().slice(0,10));
            }

            var minTriggerConsentAge = @appSettings.GetMinTriggerConsentAge();
            if(approxAge >= minTriggerConsentAge){
                if($('#ConsentTypeID').val() == "@((short)ConsentTypes.Inherited)"){
                    $('#DOB').val("");
                    event.target.value = "";
                    displayNotification('alert', '', "<p>@Labels.TriggerConsentAgeError</p>");
                }
            }

            var headAge = @ViewBag.MinFamilyHead;
            if ($('#AproximativeAge').val() < headAge) {
                document.getElementById("family").disabled = true;
            }
            else {
                document.getElementById("family").disabled = false;
            }

            validateOldAge();
            validateMinVeteranAge();
            $('[id^=datePicker3]').on('dp.change', validateConsentAge());
        }

        function setAgeFromDate() {
            var date = new Date($('#DOB').val());

            if (isNaN(date) == false) {

                var currAge = Math.floor((new Date() - new Date($('#DOB').val()).getTime()) / 3.15576e+10);

                $('#AproximativeAge').val(currAge);
            }
            else {
                $('#AproximativeAge').val("");
            }

            validateOldAge();
            validateMinVeteranAge();
            $('[id^=datePicker3]').on('dp.change', validateConsentAge());
        }


        /*
        * Event Listeners
        */

        $(".modalCloseButton").on("click", function () {
            $(".modal").hide();
        });

        $('input[name=DOBDateFirmYNbool]').on('switchChange.bootstrapSwitch', function (event, state) {

            if (state) {
                $('#DOBFlag').show();
                $('#AgeFlag').hide()
            }
            else {
                $('#DOBFlag').hide();
                $('#AgeFlag').show();
            }
        });

        $('input[name=InsertHousingHistory]').on('switchChange.bootstrapSwitch', function (event, state) {

            if (state) {
                $('#housingDetails').show();
            }
            else {
                $('#housingDetails').hide();
            }
        });

        $(function () {
            if (veteransEdit.val() == 1)
                $("#veteransSite").removeClass("hide");

            @{
                if (Model.DOBDateFirmYNbool)
                {
                    @:$('#DOBFlag').show();
                    @:$('#AgeFlag').hide();
                }
                else
                {
                    @:$('#DOBFlag').hide();
                    @:$('#AgeFlag').show();
                }

                if(Model.ClientID == null)
                {
                    @:$('#Deceased').hide();
                }
            }

            $('#ddlClientStateType').ready(ShowHideDIV);

            $('#ddlClientStateType').change(ShowHideDIV);
            $('#AgeFlag').on('change', function(){setDateFromAge(event)});
            $('#DOBFlag').on('change', function(){setAgeFromDate()});
        });

        var requiredIf = function () {
            var value = $("#DOBDateFirmYNbool").bootstrapSwitch("state");
            return value === false;
        }

        var housingRequiredIf = function () {
            var value = $("#InsertHousingHistory").bootstrapSwitch("state");
            return value === true;
        }
    </script>
    );
}

@if (appSettings.EnforceConsent())
{
    using (Html.BeginScriptContext())
    {
        Html.AddScriptBlock(
            @<script type="text/javascript">
            var minTriggerConsentAge = @appSettings.GetMinTriggerConsentAge();

            $(function () {
                //TODO:
                $('#explicitConsentFields').hide();
                $('#inheritedConsentFields').hide();
                $('.start-family').hide();

                $('#ConsentTypeID').bind($.browser.msie? 'propertychange': 'change', function (event) {

                    switch ($(this).val()) {

                        case "@((short)ConsentTypes.Explicit)":

                        case "@((short)ConsentTypes.CoordinatedAccessExplicit)":
                            $('#explicitConsentFields').fadeIn('slow');
                            $('.start-family').fadeIn('slow');
                            if ($("#familyFields").length) {
                                $('#inheritedConsentFields').hide();
                                $('#FamilyHeadClientID').val(null).trigger('change');
                            }
                            break;

                        case "@((short)ConsentTypes.Implied)":
                            if($("#familyFields").length){
                                $('#inheritedConsentFields').hide();
                                $('#FamilyHeadClientID').val(null).trigger('change');
                            }
                            $('#explicitConsentFields').hide();
                            $('.start-family').hide();
                            break;

                        case "@((short)ConsentTypes.Inherited)":
                            if($("#familyFields").length){
                                $('#inheritedConsentFields').fadeIn('slow');
                            }
                            $('#explicitConsentFields').hide();
                            $('.start-family').hide();
                            if($('#AproximativeAge').val() >= minTriggerConsentAge){
                                $('#DOB').val("");
                                $('#AproximativeAge').val("");
                            }
                            break;

                        default:
                            console.log('other consent type: ' + $(this).val());
                    }
                    validateConsentAge();
                });

                $('#AproximativeAge').on('input', function (event) {
                    var headAge = @ViewBag.MinFamilyHead;
                    if ($('#AproximativeAge').val() < headAge) {
                        document.getElementById("family").disabled = true;
                    }
                    else {
                        document.getElementById("family").disabled = false;
                    }
                })

                $('#ConsentTypeID').on('change', function (event) {
                    validateConsentAge();
                });

                $('#ConsentTypeID').trigger('change');
            });

        </script>
    );
    }
}
