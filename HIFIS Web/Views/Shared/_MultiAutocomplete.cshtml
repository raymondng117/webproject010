@model AutocompleteViewModel

@{
    var appSettings = (HIFIS.CONTRACTS.WCFContracts.DataContracts.ApplicationSettings)ViewBag.AppSettings;
}

@Html.Image(Url.Content("~/Content/images/Loaders/loader-30.gif"), new { id = "loader-" + Model.InputId, @class = "autocompleteLoadingGif", alt = "field is loading results" })
 
@using (Html.BeginScriptContext())
{
    Html.AddScriptBlock(
    @<script type="text/javascript">        
         // So, here we are binding to the ajaxComplete event at the global level.         
         select2InitFunctions.push(
             function () {

             //Gets the app setting for minimum character input for search to initialize the select2
             //If the ajax call fails or if the data key isn't found the default value is passed.
             if($('#MinimumCharacterInput').val()){
                 initMultiAutocomplete(parseInt($('#MinimumCharacterInput').val()));
             }
             else {
                 initMultiAutocomplete(parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["DefaultMinCharInput"]));
             }
             
                 function initMultiAutocomplete(minInputLength) {

                     if (minInputLength <= 0) {
                         minInputLength = 1;
                     }

                 $('select#@Model.InputName').addClass("autocomplete");
                 $('select#@Model.InputName').select2({
                     allowClear: true,
                     minimumInputLength: minInputLength,
                     ajax: {
                         type: "POST",
                         url: "@Url.Content(Model.Url)",
                         dataType: 'json',
                         delay: 250,
                         data: function (params) {
                             return {
                                 @(Model.SearchStringParameterName + ": params.term,")
                                 @("resultsToReturn: " + Model.MaxResultsToReturn + " ,")
                                 @(!String.IsNullOrEmpty(Model.AdditionalData) ? ", " + Model.AdditionalData : "")
                             };
                         },
                         processResults: function (data, page) {
                             // parse the results into the format expected by Select2.
                             // since we are using custom formatting functions we do not need to
                             // alter the remote JSON data
                             var result = [];
                             $.each(data.Result, function (index, item) {
             
                                 result.push({ "id": item.value, "text": item.label });
                             });
                             return {
                                 results: result
                             };
                         },
                         cache: true
                     },
                 });
             }
         });
    </script>
    );
}


<div id="@Model.InputName-attestation-result" class="pull-left"></div>

@using (Html.BeginScriptContext())
{
    Html.AddScriptBlock(
        @<script type="text/javascript">
            $('select#@Model.InputName').on('select2:select', function (e) {
                @if (!(Model.SelectClientFieldType == SelectClientFieldTypes.Other) && appSettings.IsAttestationEnabled() && ViewBag.AvoidAttestation != true)
                {
                    <text>
                    $.post('@Url.Action("ConfirmAccessToClient", "Master")',
                        { FieldType: '@Model.SelectClientFieldType', ID: e.params.data.id, InputName: '@Model.InputName', Callback: '@Model.OnSelect' },
                        function (data) {
                            $("#@Model.InputName-attestation-result").html(data);
                        }
                    );
                    </text>
                }
                else {
                    @Html.Raw(Model.OnSelect)
                }
            });
        </script>
    );
}
