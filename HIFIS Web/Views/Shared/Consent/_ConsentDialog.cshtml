@model ConsentDialogViewModel

@{
    var appSettings = (HIFIS.CONTRACTS.WCFContracts.DataContracts.ApplicationSettings)ViewBag.AppSettings;
}

@Html.Partial("Consent/_ConsentModal")

<script>
    function initAutocomplete(minInputLength) {
        $('#FamilyHeadClientID').select2({
            minimumInputLength: minInputLength,
            ajax: {
                type: "POST",
                url: "@Url.Content("~/ClientTombstone/AjaxGetFamilyHeadsWithActiveConsentList")",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                    return {
                        @("searchString" + ": params.term,")
                        @("resultsToReturn: " + 10 + " ,")
                    };
                },
                processResults: function (data, page) {
                    // parse the results into the format expected by Select2.
                    // since we are using custom formatting functions we do not need to
                    // alter the remote JSON data
                    var result = [];
                    $.each(data.Result, function (index, item) {
                        result.push({ "id": item.value, "text": item.label });
                    });
                    return {
                        results: result
                    };
                },
                cache: true
            },
        });
    }

    function fixWidth() {
        var $elements = $('.modal-body label.col-sm-2');
        $elements.each(function () {
            $(this).removeClass("col-sm-2").addClass("col-sm-4")
                .parent().find(".col-sm-10").removeClass("col-sm-10").addClass("col-sm-8");
        });

        $(".modal-body select").parent().attr('style', 'width: 85% !important');
        $("#ConsentTypeID").siblings(".select2-container--default").attr('style', 'width: auto');
    }

    function removeSelectedClient(){
        var fieldType = '@Model.FieldType';

        if (fieldType != '@SelectClientFieldTypes.FileNumber') {
            var $dropdown = $('select#@Model.InputName');

            if ($.isArray($dropdown.val())) {
                var $option = $('select#@Model.InputName option[value="@Model.Consent.ClientID"]');
                $option.prop("selected", false).parent().trigger("change");
            } else {
                $dropdown.val(null);
            }

            $dropdown.trigger("change");
        } else {
            $('input#@Model.InputName').val(null);
            resetROV();
            noClient();
        }

        if (fieldType == '@SelectClientFieldTypes.ClientID') {
            if ($("#hifis-client-profile").length) {
                getROVitals('');
            }
        }
        $("#consentDialog").modal('toggle');
    };

    $(function () {
        var minTriggerConsentAge = @appSettings.GetMinTriggerConsentAge();
        var clientsAge = @Model.ClientAge;

        function gettoken() {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }

        //Get everything to display correctly
        init_hifis();
        fixWidth();

        if ($('#MinimumCharacterInput').val()) {
            initAutocomplete(parseInt($('#MinimumCharacterInput').val()));
        }
        else {
            initAutocomplete(parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["DefaultMinCharInput"]));
        }

        $('#consentDialog').modal({
            backdrop: 'static',
            keyboard: false,
            show: false
        });

        $('#consentDialog').modal('toggle');

        $('#save-button').on('click', function () {
            if ($("#consentForm").valid()){
            var uploadedFile = $("#UploadedFile")[0];

            var consentFormData = new FormData();
            consentFormData.append('ClientID', $("#ClientID", "#consentForm").val());
            consentFormData.append('ReadOnlyVitals.PersonID', $("#ReadOnlyVitals_PersonID").val());
            consentFormData.append('OrganizationID', $("#OrganizationID").val());
            consentFormData.append('StartDate', $("#StartDate").val());
            consentFormData.append('ExpiryDate', $("#ExpiryDate").val());
            consentFormData.append('UploadedFile', uploadedFile.files[0]);
            consentFormData.append('ConsentTypeID', $("#ConsentTypeID").val());
            consentFormData.append("__RequestVerificationToken", gettoken());
                consentFormData.append('FamilyHeadClientID', $("#FamilyHeadClientID").val());

            //go ahead and save the consent
            $.ajax({
                url: "@Url.Action("ConsentNew", "Consent")",
                data: consentFormData,
                processData: false,
                contentType: false,
                type: 'POST'
            }).done(function (data) {
                if (data.Success) {
                    displayNotification('success', '', "<p>@Labels.DefaultDataSavedMessage</p>");

                    //then continue with normal flow
                    @Html.Raw(Model.Callback)

                    $("#consentDialog").modal('toggle');
                } else {
                    displayNotification('error', '', "<p>@Labels.FailedToSave</p>");

                    //$("#consentDialog").modal('toggle');
                    removeSelectedClient();
                }
            });
        }
        });

        $('#cancel-button').on('click', function () {
            removeSelectedClient();
        });

        $('#consentDialog').on('hidden.bs.modal', function (e) {
            $("div[id*='attestation-result']").html("");
        });

        $('#explicitConsentFields').hide();
        $('#inheritedConsentFields').hide();

        $('#ConsentTypeID').on('change', function (event) {
            // We only use the following when lookup table is editable
            // var selectedValue = $('option:selected', this).attr('data-rollup') == "" ? $(this).val() : $('option:selected', this).attr('data-rollup');
            // switch (selectedValue) {
            switch ($(this).val()) {
                case "@((short)ConsentTypes.Explicit)":
                case "@((short)ConsentTypes.CoordinatedAccessExplicit)":
                    $('#explicitConsentFields').fadeIn('slow');
                    if($("#familyFields").length){
                        $('#inheritedConsentFields').hide();
                        $('#FamilyHeadClientID').val(null).trigger('change');
                    }
                    break;
                case "@((short)ConsentTypes.Implied)":
                    if($("#familyFields").length){
                        $('#inheritedConsentFields').hide();
                        $('#FamilyHeadClientID').val(null).trigger('change');
                    }
                    $('#explicitConsentFields').hide();
                    break;
                case "@((short)ConsentTypes.Inherited)":
                    if(clientsAge >= minTriggerConsentAge){
                        displayNotification('alert', '', "<p>@Labels.TriggerConsentAgeError</p>");
                        $('#ConsentTypeID').val(null).trigger('change');
                    }else{
                        if($("#familyFields").length){
                            $('#inheritedConsentFields').fadeIn('slow');
                        }
                        $('#explicitConsentFields').hide();
                    }
                    break;
                default:
                    console.log('other consent type: ' + $(this).val());
            }
        });

    });
</script>