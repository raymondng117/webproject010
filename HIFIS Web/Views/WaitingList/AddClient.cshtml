@model ClientWaitingListViewModel
@{
    ViewBag.ViewTitle = Labels.viewTitle_AddToWaitingLists;

    ViewBag.LayoutView = LayoutPage.Client;
}

@Html.Partial("_ValidationSummaryOuter")

@*<div class="row">
        <div class="col-sm-offset-2 mrgn-bttm-md">

            @if (RightsHelper.HasRight(UserRights.Client_Vitals_Add) && RightsHelper.HasRight(UserRights.On_The_Fly_Button_Client_Add))
            {
                if (Model.ReadOnlyVitals == null)
                {
                    @Html.Partial("_OnTheFlyButton",
                        new OnTheFlyButtonViewModel()
                        {
                            ButtonName = Labels.NewClient,
                            Title = Labels.NewClient,
                            ActionName = "NewVitals",
                            ControllerName = "ClientTombstone",
                            PartialName = "~/Views/ClientTombstone/_ClientVitalsEdit.cshtml",
                            CallBackFunction = "OnTheFlyCallBack",
                            ViewModel = new ClientVitalsViewModel() { IsStealth = false }
                        }
                    )
                }
             }
        </div>
    </div>*@

<div class="clearfix"></div>

<div>
    @using (Html.BeginForm("AddClient", "WaitingList", new { WaitingListID = Model.WaitingListID }, FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.AntiForgeryToken()
        @Html.Partial("_BaseHiddenFor", (BaseViewModel)Model)

        @Html.HiddenFor(model => model.ReadOnlyVitals.ClientID)
        @Html.HiddenFor(model => model.ReturnToMain);

                                                    if (Model.WaitingListID.IsEmptyOrNull())
                                                    {
                                                        <div>
                                                            @Html.HifisEditorFor(model => model.WaitingListID, ViewBag.WaitingLists as SelectList)
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div>
                                                            @Html.HifisEditorFor(model => model.WaitingListID, ViewBag.WaitingLists as SelectList, null, new { @id = "waitin" })
                                                        </div>
                                                    }

                                                    if (Model.ReadOnlyVitals == null)
                                                    {
                                                        <div>
                                                            @Html.HifisAutocompleteFor(
                                                                model => model.ClientID
                                                                , Url.Content("~/ClientTombstone/AjaxGetClientList")
                                                                , null
                                                                , new AutocompleteViewModelOptions
                                                                {
                                                                        OnSelect = "updateClientSideBar();"
                                                                        , Placeholder = Labels.SearchClient
                                                                        , HiddenValue = true
                                                                })
                                                            <input type="hidden" id="SelectedClient" value="" />
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        @Html.HiddenFor(model => model.ClientID)
                                                    }


                                                    @Html.Partial("_ClientWaitingList", Model);

        <div class="form-group">
            <div class="col-sm-offset-3 col-sm-9">
                <button type="submit" class="saveButton">@Labels.Save</button>
                @if (Model.ReadOnlyVitals == null)
                {
                    @Html.ActionLink(Labels.Cancel, "ManageClients", "WaitingList", new { WaitingListID = Model.WaitingListID }, new { @class = "cancelButton", alt = Labels.Cancel, aria_label = Labels.Cancel, @role = "button" })
                }
                else
                {
                    @Html.ActionLink(Labels.Cancel, "ClientList", "WaitingList", new { id = Model.ClientID }, new { @class = "cancelButton", alt = Labels.Cancel, aria_label = Labels.Cancel, @role = "button" })
                }
            </div>
        </div>
    }
</div>

@using (Html.BeginScriptContext())
{
    Html.AddScriptBlock(
        @<script type="text/javascript">
            @if (Model.ReadOnlyVitals == null)
            {
            <text>
            $(document).ready(function () {
                $("#waitin").attr('disabled', true);
            });
            </text>
            }

            function OnTheFlyCallBack(objectID, formData) {

                var Name = formData["LastName"] + ", " + formData["FirstName"];
                $("#ClientIDSearchBox").val(Name);
                $("#ClientID").val(objectID);

                getROVitals(objectID);
            }

            function updateClientSideBar() {
                getROVitals($('#ClientID').val());
            }
        </script>
);
}
