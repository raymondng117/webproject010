@model DocumentViewModel 

@Html.Partial("_ClientVitalsRO_ext", new ClientVitalsReadOnlyWrapperViewModel(Model.ReadOnlyVitals))

@Html.HiddenFor(model => model.DocumentID) 
@Html.HiddenFor(model => model.ClientID)
@Html.HiddenFor(model => model.PersonID)
@*@Html.HiddenFor(model => model.UploadFile)*@
@Html.HiddenFor(model => model.IsClient)
@Html.HiddenFor(model => model.DocumentTypeID)
@Html.HiddenFor(model => model.ReferenceID)

@Html.HiddenFor(model => model.ReturnUrl)

@Html.Partial("_BaseHiddenFor", (BaseViewModel)Model)
    
<div>
    @if (Model.DocumentID == null || Model.DocumentID == "0")
    {
        //need to replace form-control class to get file upload to appear correctly in a lightbox
        @(new MvcHtmlString(Html.HifisTextBoxFor(model => model.UploadFile, new { @type = "file" }).ToHtmlString().Replace("form-control", "lbx-file-form-control")))
    }
    else
    {
        @Html.HiddenFor(model => model.UploadFile) 
    }
</div>  

<div>
    @if (Model.DocumentID != null || Model.DocumentID != "0")
    {
        
    }
    @Html.HifisEditorFor(model => model.Name)
</div>

<div>
    @Html.HifisEditorFor(model => model.ConfidentialYN, "YesNo")
</div>

<div>
    @Html.HifisTextAreaFor(model => model.Description, new { @class = "commentBoxSize max_width_90" })
</div>
    

<!-- JavaScript -->
@using (Html.BeginScriptContext())
{
    Html.AddScriptBlock(
        @<script type="text/javascript">
             var requiredIf = function () {

                 var value = document.querySelector("#DocumentID").getAttribute("value");
                 return value === "" || value === "0";
             }
        </script>
    );
}
