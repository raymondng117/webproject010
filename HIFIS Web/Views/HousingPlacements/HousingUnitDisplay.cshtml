@*@model HousingUnitViewModel

@{
    ViewBag.LayoutView = LayoutPage.Client;

    ViewBag.ViewTitle = Labels.viewTitle_DisplayHousingUnit;
    
}


<ul class="nav nav-tabs" role="tablist">
	<li class="active">
		<a class="tabButton" href="#Details" role="tab" data-toggle="tab">@Labels.Details</a>
	</li>
	<li>
		<a class="tabButton" href="#Address" role="tab" data-toggle="tab">@Labels.Address</a>
	</li>
	<li>
		<a class="tabButton" href="#Photos" role="tab" data-toggle="tab">@Labels.Photos</a>
	</li>
	<li>
		<a class="tabButton" href="#Maintenance" role="tab" data-toggle="tab">@Labels.Maintenance</a>
	</li>
</ul>

<!-- Tab panes -->
<div class="panel panel-default border-top-fix-tabs">
	<div class="panel-body">
		<div class="tab-content">
			<div class="tab-pane active" id="Details">
				<div class="displayView">
                
					<div>

						@Html.HifisLabelFor(model => model.HouseTypeID, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_SingleItemSelectList", 
									new SingleItemSelectList 
									{
										ID = Model.HouseTypeID,
										List = WebHelper.GetSelectListFromCache(CachedTableTypes.HIFIS_HouseTypes, ViewBag.CurrentCulture, Model.HouseTypeID)
									})
					</div>

					<div>

						@Html.HifisLabelFor(model => model.StatusTypeID, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_SingleItemSelectList", 
									new SingleItemSelectList 
									{
										ID = Model.StatusTypeID,
										List = WebHelper.GetSelectListFromCache(CachedTableTypes.HIFIS_HouseStatusTypes, ViewBag.CurrentCulture, Model.StatusTypeID)
									})
					</div>

					<div>

						@Html.HifisLabelFor(model => model.StatusDate, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.StatusDate)
					</div>

					<div>

						@Html.HifisLabelFor(model => model.OccupanyStatus, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_SingleItemSelectList", 
									new SingleItemSelectList 
									{
										ID = Model.OccupanyStatus,
										List = WebHelper.GetSelectListFromCache(CachedTableTypes.HIFIS_OccupancyStatusTypes, ViewBag.CurrentCulture, Model.OccupanyStatus)
									})
					</div>

					<div>

						@Html.HifisLabelFor(model => model.DateOfOccupancy, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.DateOfOccupancy)
					</div>

					<div>
                        @Html.HifisLabelFor(model => model.OccupancyComment, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.OccupancyComment)
					</div>

					<div>

						@Html.HifisLabelFor(model => model.LandlordPersonID, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_SingleItemSelectList", 
									new SingleItemSelectList 
									{
										ID = Model.LandlordPersonID,
										List = ViewBag.landlordList as SelectList
									})
					</div> 
					 
					<div> 

						@Html.HifisLabelFor(model => model.OrganizationID, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_SingleItemSelectList", 
									new SingleItemSelectList 
									{
										ID = Model.OrganizationID,
										List = ViewBag.orgList as SelectList
									})
					</div>

					<div>

						@Html.HifisLabelFor(model => model.Attributes, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_MultipleItemSelectList", 
										new MultipleItemSelectList 
										{
											IDs = Model.Attributes.Select(a => a.ToString()).ToList(),
											List = WebHelper.GetSelectListFromCache(CachedTableTypes.HIFIS_HouseAttributeTypes, Culture, Model.Attributes.Select(a => a.ToString()).ToList())
										})
					</div>
			   
					<div>

						@Html.HifisLabelFor(model => model.IsShareable, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_YesNoDisplay", Model.IsShareable)
					</div>

					<div>    

						@Html.HifisLabelFor(model => model.IsInPlacementInventory, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_YesNoDisplay", Model.IsInPlacementInventory)
					</div>
					
					<div>

						@Html.HifisLabelFor(model => model.AreaSqFt, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.AreaSqFt) @Labels.Sqft
					</div>
				  
					<div>    
						<label class="autowidth">&nbsp;</label> @Html.DisplayFor(model => model.AreaSqM) @Labels.M2
					</div>      
					
					<div>

						@Html.HifisLabelFor(model => model.YearOfBuilt, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.YearOfBuilt)
					</div>

					<div>

						@Html.HifisLabelFor(model => model.NoOfBedrooms, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.NoOfBedrooms)
					</div>
				 
					<div>

						@Html.HifisLabelFor(model => model.NoOfFloors, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.NoOfFloors)
					</div>
				 
					<div>

						@Html.HifisLabelFor(model => model.Floor, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.Floor)
					</div>

					<div>
						@Html.HifisLabelFor(model => model.Rent, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.Rent) /@Labels.Month   
					</div>

					<div id="active">

						@Html.HifisLabelFor(model => model.ActiveYN, new { @class = "autowidth" })
						@Html.Partial("DisplayViewTemplates/_YesNoDisplay", Model.ActiveYN)
					</div>

					<div>
                        @Html.HifisLabelFor(model => model.Comments, new { @class = "autowidth" })
						@Html.DisplayFor(model => model.Comments)
					</div>

				</div>
			</div>
			<div class="tab-pane" id="Address">
				<div>
					@if (Model.Address != null)
					{
						<table class="wb-tables table table-striped table-hover" data-wb-tables='{ "info": false, "paging": false, "filter": false }'>
							<thead>
								<tr>
									<th>@Labels.Address</th>
									<th>@Labels.Province</th>
									<th>@Labels.City</th>
									<th>@Labels.PostalCode</th>
								</tr>
							</thead>
							<tbody>
									<tr>
										<td>@Model.Address.AddressLn1</td>
										<td>@Model.Address.Province</td>
										<td>@Model.Address.City</td>
										<td>@Model.Address.PostalCode</td>
									</tr>	
							</tbody>
						</table>
						}
						else
						{ 
							<strong>@Labels.NoRecords</strong>
						}
				</div>
			</div>
			<div class="tab-pane" id="Photos">
				<div id="photos">
					@if (Model.Photos.Count != 0)
					{
						<table class="wet-boew-zebra DataTable">
							<thead>
							<tr>
								<th class="align-text-center">@Labels.Thumbnail</th>
								<th class="align-text-center">@Labels.Name</th>
								<th class="align-text-center">@Labels.Date</th>
							</tr>
							</thead>
							<tbody>
								<tr>                                
											
									@foreach (HousePhotoViewModel photo in Model.Photos)
									{
												
											<td class="align-text-center">
												<div class="wet-boew-lightbox">
													<a href="@Url.Content("~/HousingUnit/GetPhoto/")@photo.HousePhotoID?.jpg" class="lb-item">
														<img alt="@photo.Name" class="thumb" src="@Url.Content("~/HousingUnit/GetPhoto/")@photo.HousePhotoID" /><br />
														<span class="glyphicon glyphicon-zoom-in"></span><span class="font-xsmall color-accent">@Labels.Enlarge</span>
													</a>
												</div>
											</td>
											<td class="align-text-center">@Html.ActionLink(photo.Name, "GetPhoto", new { id = photo.HousePhotoID })</td>
											<td class="align-text-center">@Html.DisplayFor(m => photo.PhotoDate)</td>
												
									} 
																		
								</tr> 
							</tbody>  
			 
						</table>
					}
					else
					{
						<strong>@Labels.NoRecords</strong>
					} 
													  
				</div>
			</div>
			<div class="tab-pane" id="Maintenance">
				@if (!Model.MaintenanceWork.IsEmptyOrNull())
				{
					decimal? x = 0.0m;                
					<table class="wet-boew-zebra DataTable">
						<thead>
							<tr>
								<th>@Labels.MaintenanceWork</th>
								<th>@Labels.Description</th>
								<th>@Labels.ScheduledDate</th>
								<th>@Labels.Contractor</th>
								<th>@Labels.ActualCost</th>
								<th>@Labels.Action</th>
							</tr>
						</thead>
						<tbody>
							@foreach (HousingMaintenanceViewModel item in Model.MaintenanceWork)
							{
								if (item.ActualCost != null)
								{
									x += item.ActualCost;
								}
								<tr>
									<td class="align-text-center">@item.MaintenanceTypeName</td>
									<td class="align-text-center">@item.Description</td>
									<td class="align-text-center">@Html.DisplayFor(m => item.ScheduledFrom)</td>
									<td class="align-text-center">@item.ContractorPersonName</td>
									<td class="align-text-center">@{if (item.ActualCost != null)
																	{<text>$</text>}@item.ActualCost}</td>
									<td class="align-text-center wdth-10">
										@Html.ActionLink(Labels.Display, "DisplayMaintenance", "HousingUnit", new { id = item.HouseMaintenanceID }, new { @class = "displayButton noText" })
									</td>
								</tr>
							}  
						</tbody>    
					</table>
							if (x != 0.0m)
							{
						<span class="align-right mrgn-rght-xl"><strong>@Labels.Total: $@x</strong></span>
							}
				}
				else
				{
					<strong>@Labels.NoRecords</strong>
				}
			</div>
		</div>	
	</div>
</div>
<div>
    @Html.ActionLink(Labels.Cancel, "HousingUnitSearch", "HousingPlacements", new { id = ViewBag.ReadOnlyVitals.ClientID, placementID = ViewBag.PlacementID }, new { @class = "cancelButton" })
</div>

*@
