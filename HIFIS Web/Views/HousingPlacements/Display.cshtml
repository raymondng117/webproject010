@model HIFIS.WEB.ViewModels.HousingPlacementViewModel

@{
    /*This section determines what Actions are available and what status is displayed depending on status of placement*/
    MvcHtmlString HousingUnitSearchLink = null;
    MvcHtmlString NewPlacementAttemptLink = null;
    MvcHtmlString FinalPlacementAttemptLink = null;
    MvcHtmlString MoveInLink = null;
    MvcHtmlString Status = null;
    MvcHtmlString EditButton = null;
    MvcHtmlString NewHousingUnit = null;
    MvcHtmlString NewPlacement = null;

    string status = null;

    ViewBag.HideSubsidyActions = false;

    if (Model.PlacementStatus == PlacementStatusTypes.FollowUpsCompleted || Model.PlacementStatus == PlacementStatusTypes.Failed)
    {
        ViewBag.HideSubsidyActions = true;
    }

    // We only want to use the following when the lookup table is modifiable
    // switch ((PlacementStatusTypes)Utilities.EqualsOrRollsUpTo(CachedTableTypes.HIFIS_PlacementStatusTypes, (short)Model.PlacementStatus))
    switch (Model.PlacementStatus)
    {
        case PlacementStatusTypes.Failed:
            Status = new MvcHtmlString("<p>" + Labels.PlacementHasEnded + "</p>" + "<p>" + Labels.PlacementFailed + "</p>");

            status = "<span class='text-danger'>" + Labels.PlacementFailed + "</span>";

            break;

        case PlacementStatusTypes.FollowUpsCompleted:
            Status = new MvcHtmlString("<p>" + Labels.PlacementHasEnded + "</p>" + "<p>" + Labels.FollowUpsCompleted + "</p>");

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Add, Model.OrganizationID))
            {
                NewPlacement = Html.ActionLink(Labels.NewPlacement, "New", "HousingPlacements", new { id = Model.PrimaryClient.ClientID }, new { @class = "addButton", alt=Labels.NewPlacement, aria_label = Labels.NewPlacement, @role = "button" });
            }

            status = "<span class='text-success'>" + Labels.FollowUpsCompleted + "</span>";

            break;

        case PlacementStatusTypes.HousingSecured:
            Status = new MvcHtmlString("<p>" + Labels.HousingSecuredOn + ": " + Html.DisplayFor(model => model.DateHousingSecured) + "</p>" + "<p>" + Labels.DateExpectedMoveIn + ": " + Html.DisplayFor(model => model.DateExpectedMoveIn) + "</p>");

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Search, Model.OrganizationID))
            {
                HousingUnitSearchLink = Html.ActionLink(Labels.DifferentHousingSearch, "HousingUnitSearch", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "searchButton", alt=Labels.DifferentHousingSearch, aria_label = Labels.DifferentHousingSearch, @role = "button" });
            }

            if (RightsHelper.HasRight(UserRights.HousingPlacements_MoveIn, Model.OrganizationID))
            {
                MoveInLink = Html.ActionLink(Labels.MoveIn, "GetMoveInForm", new { pClientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID, HouseID = Model.HousingUnit.HouseID }, new { @class = "wb-lbx lbx-modal forwardButton", alt = Labels.MoveIn, aria_label = Labels.MoveIn, @role = "button" });
                //MoveInLink = Html.ActionLink(Labels.MoveIn, "GetMoveInForm", "HousingPlacements", new { pClientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID, HouseID = WebHelper.DecryptID(Model.HousingUnit.HouseID) }, "cIDs", Model.ClientsFamilyClientIDs, new { @class = "wb-lbx lbx-modal forwardButton" });
            }

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Attempt_Add, Model.OrganizationID))
            {
                NewPlacementAttemptLink = Html.ActionLink(Labels.NewPlacementAttempt, "GetNewAttemptForm", "HousingPlacements", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "wb-lbx lbx-modal addButton", alt=Labels.NewPlacementAttempt, aria_label = Labels.NewPlacementAttempt, @role = "button" });
                FinalPlacementAttemptLink = Html.ActionLink(Labels.EndHousingPlacement, "GetNewAttemptForm", "HousingPlacements", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID, FinalAttempt = true }, new { @class = "wb-lbx lbx-modal cancelButton", alt=Labels.EndHousingPlacement, aria_label = Labels.EndHousingPlacement, @role = "button" });
            }

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Edit, Model.OrganizationID))
            {
                EditButton = Html.ActionLink(Labels.Edit, "Edit", "HousingPlacements", new { id = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "editButton", alt=Labels.Edit, aria_label = Labels.Edit, @role = "button" });
            }

            status = "<span class='text-warning'>" + Labels.HousingSecured + "</span>";

            break;

        case PlacementStatusTypes.MovedIn:
            Status = new MvcHtmlString("<p>" + Labels.MovedIntoHousingOn + ": " + Html.DisplayFor(model => model.DateMovedIn) + "</p>" + "<p>" + Labels.NextScheduledFollowUp + ": " + (Model.NextScheduledFollowUp.HasValue ? Html.DisplayFor(model => model.NextScheduledFollowUp).ToString() : Labels.NA));

            status = "<span class='text-primary'>" + Labels.MovedIntoHousing + "</span>";
            break;

        default:
            Status = new MvcHtmlString("<p>" + Labels.HousingNotSecured + "</p>");

            status = "<span class='text-danger'>" + Labels.HousingNotSecured + "</span>";

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Search, Model.OrganizationID))
            {
                HousingUnitSearchLink = Html.ActionLink(Labels.NewHousingSearch, "HousingUnitSearch", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "searchButton", alt=Labels.NewHousingSearch, aria_label = Labels.NewHousingSearch, @role = "button" });
            }

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Attempt_Add, Model.OrganizationID))
            {
                NewPlacementAttemptLink = Html.ActionLink(Labels.NewPlacementAttempt, "GetNewAttemptForm", "HousingPlacements", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "wb-lbx lbx-modal addButton", alt=Labels.NewPlacementAttempt, aria_label = Labels.NewPlacementAttempt, @role = "button" });
                FinalPlacementAttemptLink = Html.ActionLink(Labels.EndHousingPlacement, "GetNewAttemptForm", "HousingPlacements", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID, FinalAttempt = true }, new { @class = "wb-lbx lbx-modal cancelButton", alt=Labels.EndHousingPlacement, aria_label = Labels.EndHousingPlacement, @role = "button" });
            }

            if (RightsHelper.HasRight(UserRights.HousingPlacements_Edit, Model.OrganizationID))
            {
                EditButton = Html.ActionLink(Labels.Edit, "Edit", "HousingPlacements", new { id = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "editButton", alt=Labels.Edit, aria_label = Labels.Edit, @role = "button" });
            }

            if (RightsHelper.HasRight(UserRights.HousingUnits_Add, Model.OrganizationID))
            {
                NewHousingUnit = Html.ActionLink(Labels.AddAndSecure, "GetNewUnitForm", "HousingUnit", new { clientID = Model.ReadOnlyVitals.ClientID, placementID = Model.HousePlacementID }, new { @class = "wb-lbx lbx-modal addButton", alt=Labels.AddAndSecure, aria_label = Labels.AddAndSecure, @role = "button" });
            }
            break;
    }
}

@{
    ViewBag.ViewTitle = Labels.viewTitle_PlacementDetails + " - " + status;

    ViewBag.LayoutView = LayoutPage.Client;
}

@Html.Partial("_ValidationSummaryOuter")


@Html.HiddenFor(model => model.PrimaryClientID)
@Html.Partial("_HousingPlacementDetails", Model)

@if (Model.HousingUnit != null)
{
    <div class="mrgn-bttm-md mrgn-tp-md">
        @HousingUnitSearchLink
        @MoveInLink
    </div>
}
else
{
    <div class="mrgn-bttm-md mrgn-tp-md">
        @HousingUnitSearchLink
        @NewHousingUnit
    </div>
}

<div class="clearfix"></div>
<br />

<ul class="nav nav-tabs" role="tablist">
    @if (Model.PlacementStatus == PlacementStatusTypes.MovedIn || Model.PlacementStatus == PlacementStatusTypes.FollowUpsCompleted)
    {
        if (RightsHelper.HasRight(UserRights.Followup_List))
        {
            <li class="active">
                <a class="tabButton" href="#followUpsTab" role="tab" data-toggle="tab">@Labels.FollowUps</a>
            </li>
        }
        <li>
            <a class="tabButton" href="#Attempts" role="tab" data-toggle="tab">@Labels.Attempts</a>
        </li>
        if (RightsHelper.HasRight(UserRights.HousingUnits_Subsidy_List))
        {
            <li>
                <a class="tabButton" href="#subsidiesTab" role="tab" data-toggle="tab">@Labels.Subsidies</a>
            </li>
        }
    }
    else
    {
        <li class="active">
            <a class="tabButton" href="#Attempts" role="tab" data-toggle="tab">@Labels.Attempts</a>
        </li>
    }
    <li>
        <a class="tabButton" href="#HPDocuments" role="tab" data-toggle="tab">@Labels.Documents</a>
    </li>

    @if (ViewBag.CustomTables.CustomTableList.Count > 0)
    {
        <li>
            <a class="tabButton" href="#CustomTables" role="tab" data-toggle="tab">
                @(Session["CurrentOrgCustomTableLabel"] != null ? Session["CurrentOrgCustomTableLabel"].ToString() : Labels.CustomTables)
            </a>
        </li>
    }

</ul>
<!-- Tab panes -->
<div class="panel panel-default border-top-fix-tabs">
    <div class="panel-body">
        <div class="tab-content">
            <div class="tab-pane @((Model.PlacementStatus == PlacementStatusTypes.MovedIn || Model.PlacementStatus == PlacementStatusTypes.FollowUpsCompleted) ? "" : "active")" id="Attempts">
                <div>
                    <div class="table-responsive">
                        <table id="attemptsTable" class="wb-tables table table-striped" data-wb-tables='{ "columns": [
                                                                            { "width": "15%", "data": "date"},
                                                                            { "width": "15%", "data": "caseworker"},
                                                                            { "width": "40%", "data": "reason"},
                                                                            { "width": "30%", "data": "comments"}
                                                                        ],
                                                                        "order": [ [0, "desc"] ],
                                                                        "ajax": "@Url.Content("~/HousingPlacements/AttemptListJson?placementID=" + Model.HousePlacementID)"
                                                                    }'>
                            <thead>
                                <tr>
                                    <th>@Labels.DateAttempted</th>
                                    <th>@Labels.CaseWorker</th>
                                    <th>@Labels.ReasonHousingNotSecured</th>
                                    <th>@Labels.Comments</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>

                    <div class="clearfix"></div>
                    <p>@NewPlacementAttemptLink</p>
                </div>
            </div>
            @if (RightsHelper.HasRight(UserRights.Followup_List))
            {
                if (Model.PlacementStatus == PlacementStatusTypes.MovedIn || Model.PlacementStatus == PlacementStatusTypes.FollowUpsCompleted)
                //  We only want to use the following when the lookup table is modifiable
                // if (((PlacementStatusTypes)Utilities.EqualsOrRollsUpTo(CachedTableTypes.HIFIS_PlacementStatusTypes, (short)Model.PlacementStatus) == PlacementStatusTypes.MovedIn)
                //   || ((PlacementStatusTypes)Utilities.EqualsOrRollsUpTo(CachedTableTypes.HIFIS_PlacementStatusTypes, (short)Model.PlacementStatus) == PlacementStatusTypes.FollowUpsCompleted))
                {
                    @* We only want to use the following when the lookup table is modifiable *@
                    @*<div class="tab-pane @((((PlacementStatusTypes)Utilities.EqualsOrRollsUpTo(CachedTableTypes.HIFIS_PlacementStatusTypes,(short)Model.PlacementStatus) == PlacementStatusTypes.MovedIn ) || ((PlacementStatusTypes)Utilities.EqualsOrRollsUpTo(CachedTableTypes.HIFIS_PlacementStatusTypes,(short)Model.PlacementStatus) == PlacementStatusTypes.FollowUpsCompleted )) ? "active" : "")" id="followUpsTab">*@
                    <div class="tab-pane @((Model.PlacementStatus == PlacementStatusTypes.MovedIn || Model.PlacementStatus == PlacementStatusTypes.FollowUpsCompleted) ? "active" : "")" id="followUpsTab">
                        @Html.Partial("~/Views/FollowUps/_FollowUpList.cshtml", new ClientHousingViewModel()
        {
            ClientID = Model.ReadOnlyVitals.ClientID,
            ClientHouseID = Model.ClientHouseID,
            HousePlacementID = Model.HousePlacementID,
            HousePlacementServiceID = WebHelper.EncryptID(Model.ServiceID),
            HousePlacementFollowUpCompleted = Model.PlacementStatus == PlacementStatusTypes.FollowUpsCompleted ? true : false
        })
                    </div>
                }
            }
            <div class="tab-pane" id="HPDocuments">

                <div class="table-responsive">
                    <table id="documentsTable" class="wb-tables table table-striped table-hover" data-wb-tables='{  "columns": [
                                                                                { "width": "30%", "data": "document"},
                                                                                { "width": "30%", "data": "description"},
                                                                                { "width": "20%", "data": "date"},
                                                                                { "width": "20%" , "data": "action", "name" : "documentAction", "visible" : true }
                                                                            ],
                                                                            "order": [ [0, "desc"] ],
                                                                            "ajax": "@Url.Content("~/HousingPlacements/DocumentListJson?documentTypeID=" + (short)DocumentTypes.HousingPlacement + "&clientID=" + Model.PrimaryClientID + "&referenceID=" + WebHelper.DecryptID(Model.HousePlacementID))"
                                                                        }'>
                        <thead>
                            <tr>
                                <th class="align-text-center">@Labels.DocumentName</th>
                                <th class="align-text-center">@Labels.Description</th>
                                <th class="align-text-center">@Labels.DateCreated</th>
                                <th class="align-text-center">@Labels.Action</th>
                            </tr>
                        </thead>
                        <tbody class="align-text-center"></tbody>
                    </table>

                </div>
                @if (RightsHelper.HasRight(UserRights.Documents_Add, Model.OrganizationID))
                {
                    <a href="@Url.Content("~/HousingPlacements/GetNewDocumentForm?referenceID=" + Model.HousePlacementID + "&clientID=" + Model.PrimaryClient.ClientID + "&personID=" + Model.PrimaryClient.PersonID)" aria-controls="Modal_NewItem" class="wb-lbx lbx-modal addButton" role="button">@Labels.NewDocument</a>
                }
            </div>
            @if (RightsHelper.HasRight(UserRights.HousingUnits_Subsidy_List))
            {
                <div class="tab-pane" id="subsidiesTab">

                    <div class="table-responsive">
                        <table id="subsidiesTable" class="wb-tables table table-striped table-hover" data-wb-tables='{  "columns": [
                                                                                                                { "width": "22%" , "data": "program" },
                                                                                                                { "width": "20%" , "data": "serviceProvider" },
                                                                                                                { "width": "10%" , "data": "amount" },
                                                                                                                { "width": "15%" , "data": "startDate" },
                                                                                                                { "width": "15%" , "data": "endDate" },
                                                                                                                { "width": "18%" , "data": "action", "name" : "subsidyAction", "visible" : true }
                                                                                                            ],
                                                                                                            "order": [ [3, "desc" ] ],
                                                                                                            "ajax": "@Url.Content("~/HousingPlacements/GetSubsidiesJson?clientHouseID=" + Model.ClientHouseID)"
                                                                                                        }'>
                            <thead>
                                <tr>
                                    <th class="align-text-center">@Labels.ProgramName</th>
                                    <th class="align-text-center">@Labels.ServiceProvider</th>
                                    <th class="align-text-center">@Labels.Amount</th>
                                    <th class="align-text-center">@Labels.DateStart</th>
                                    <th class="align-text-center">@Labels.DateEnd</th>
                                    <th class="align-text-center">@Labels.Action</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>

                    </div>
                    @if (RightsHelper.HasRight(UserRights.HousingUnits_Subsidy_Add) && (!ViewBag.HideSubsidyActions || RightsHelper.HasRight(UserRights.HousingUnits_Subsidy_Edit_Closed_Placements)))
                    {
                        @Html.ActionLink(Labels.NewSubsidy, "GetNewSubsidyForm", "HousingUnit", new { clientHouseID = Model.ClientHouseID }, new { @class = "wb-lbx lbx-modal addButton", alt=Labels.NewSubsidy, aria_label = Labels.NewSubsidy, @role = "button" })
                    }
                </div>
            }

            <!-- Custom Tables -->
            @if (ViewBag.CustomTables.CustomTableList.Count > 0)
            {
                <div class="tab-pane" id="CustomTables" style="padding: 10px;">
                    @Html.Partial(Url.Content("~/Views/CustomTables/_CustomTableTabBuilder.cshtml"), ViewBag.CustomTables as CustomTablesListViewModel)
                </div>
            }
        </div>
    </div>
</div>

<div class="mrgn-bttm-md mrgn-tp-md">
    @Html.ActionLink(Labels.BacktoPlacementList, "ClientList", new { id = Model.PrimaryClient.ClientID }, new { @class = "prevButton", @id = "backToClientList", alt=Labels.BacktoPlacementList, aria_label = Labels.BacktoPlacementList, @role = "button" })
    @FinalPlacementAttemptLink
    @NewPlacement
    @if (RightsHelper.HasRight(UserRights.HousingPlacements_Edit, Model.OrganizationID))
    {
        @Html.ActionLink(Labels.EditPlacementDetails, "Edit", "HousingPlacements", new { id = Model.PrimaryClient.ClientID, placementID = Model.HousePlacementID }, new { @class = "editButton", alt=Labels.EditPlacementDetails, aria_label = Labels.EditPlacementDetails, @role = "button" })
    }

</div>


@using (Html.BeginScriptContext())
{
    Html.AddScriptBlock(
@<script type="text/javascript">
            //resizes the data table columns when you switch tabs, hidden tables break tab width.
            $(document).ready(function () {
                $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                    if (jQuery().DataTable) {
                        $('.dataTable').DataTable().columns.adjust();
                    }
                });
            });

            var hideSubsidyActions = "@ViewBag.HideSubsidyActions";
            var canEditSubsidies = "@RightsHelper.HasRight(UserRights.HousingUnits_Subsidy_Edit_Closed_Placements)";

            //on unit list redraw reinit hifis scripts and reinit lightboxes
            $('#subsidiesTable').on('draw.dt', function () {
                init_hifis();
                $('.wb-lbx').trigger("wb-init.wb-lbx");

                if (hideSubsidyActions == "True" && canEditSubsidies == "False") {
                    var table = $(this).DataTable();
                    table.column("subsidyAction:name").visible(false);
                }
            });
</script>);
}
